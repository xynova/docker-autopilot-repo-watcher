---

- name: Set variables
  set_fact: 
    NETWORK_CONTAINER: "pod-net-{{ NEW_VERSION }}"
    UI_CONTAINER: "pod-ui-{{ NEW_VERSION }}"
    API_CONTAINER: "pod-api-{{ NEW_VERSION }}"
    PROXY_CONTAINER: "pod-proxy-{{ NEW_VERSION }}"
    MONITOR_CONTAINER: "pod-monitor-{{ NEW_VERSION }}"

- name: Run NETWORK container to initialize the POD
  shell: >
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped  
    --expose 80 
    --label role=network 
    --label version={{ NEW_VERSION }} 
    --label group={{ DEPLOYMENT_GROUP }}
    --name={{ NETWORK_CONTAINER }} 
    -u {{ UID_SERVICES }} 
    --cap-drop=all 
    docker.io/kubernetes/pause:latest 
    || docker -H {{ DOCKER_HOST }} restart {{ NETWORK_CONTAINER }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run UI container and join it to the POD network
  shell: >
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" 
    --label version={{ NEW_VERSION }} 
    --label group={{ DEPLOYMENT_GROUP }}
    --name {{ UI_CONTAINER }} 
    -v {{ NEW_GIT_DIR }}:/UI:ro,z 
    --workdir /UI 
    -u {{ UID_SERVICES }} 
    --cap-drop=all 
    docker.io/library/node:latest 
    /usr/local/bin/node local-dev/appServer 
    || docker -H {{ DOCKER_HOST }} restart {{ UI_CONTAINER }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run API container and join it to the POD network
  shell: >
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" 
    --label version={{ NEW_VERSION }} 
    --label group={{ DEPLOYMENT_GROUP }}
    --name {{ API_CONTAINER }} 
    -v {{ NEW_GIT_DIR }}:/UI:ro,z 
    --workdir /UI 
    -u {{ UID_SERVICES }} 
    --cap-drop=all 
    docker.io/library/node:latest 
    /usr/local/bin/node local-dev/apiServer 
    || docker -H {{ DOCKER_HOST }} restart {{ API_CONTAINER }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run PROXY Container to route traffic and join it to the POD network
  shell: >
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" 
    --label version={{ NEW_VERSION }} 
    --label group={{ DEPLOYMENT_GROUP }}
    --name {{ PROXY_CONTAINER }} 
    -v "{{ DOCKERDATA_DIR }}/app-nginx/nginx.app.conf":/etc/nginx/conf.d/default.conf:ro,Z 
    docker.io/library/nginx:latest 
    || docker -H {{ DOCKER_HOST }} restart {{ PROXY_CONTAINER }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run MONITOR container to register the POD with etcd
  shell: >
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" 
    --label version={{ NEW_VERSION }} 
    --label group={{ DEPLOYMENT_GROUP }}
    --name {{ MONITOR_CONTAINER }} 
    -v "{{ DOCKERDATA_DIR }}/app-containerbuddy":/etc/containerbuddy:ro,Z 
    -e HOST_IP={{ HOST_IP }} 
    -e DEPLOYMENT_GROUP={{ DEPLOYMENT_GROUP }}
    -u {{ UID_SERVICES }} 
    --cap-drop=all 
    node.local/containerbuddy:latest 
    || docker -H {{ DOCKER_HOST }} restart {{ MONITOR_CONTAINER }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Get POD network namespace container ID
  shell: >
    CONTAINER_ID=$(docker -H {{ DOCKER_HOST }} ps -q
    --filter label=version 
    --filter name={{ NETWORK_CONTAINER }} 
    --filter group={{ DEPLOYMENT_GROUP }})
    && docker -H {{ DOCKER_HOST }} inspect --format {% raw %}'{{ .Config.Hostname }}'{% endraw %} $CONTAINER_ID
  register: POD_HOSTNAME
  changed_when: false

- name: Wait for the network POD to register with etcd
  uri: url=http://{{ HOST_IP }}:2379/v2/keys/containerbuddy/{{ DEPLOYMENT_GROUP }}/{{ DEPLOYMENT_GROUP }}-{{ POD_HOSTNAME.stdout }}/service
  register: COMMAND_RESULT
  until: COMMAND_RESULT.status == 200
  retries: 15
  delay: 5
  when: APP_POD_ID_RESULT is defined and APP_POD_ID_RESULT.stdout != ""


