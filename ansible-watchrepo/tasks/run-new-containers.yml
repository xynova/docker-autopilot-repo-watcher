---

- name: Set variables
  set_fact: 
    NETWORK_CONTAINER: "app-pod-pause-{{ NEW_VERSION }}"

- name: Run new Pause container to initialize the POD
  shell: |
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped  --expose 80 \
    --label role=pod-head --label version={{ NEW_VERSION }} \
    --name=app-pod-pause-{{ NEW_VERSION }} \
    docker.io/kubernetes/pause \ 
    || docker -H {{ DOCKER_HOST }} restart app-pod-pause-{{ NEW_VERSION }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run new App Layouts Container and join it to the POD network
  shell: |
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" \
    --name app-pod-app-{{ NEW_VERSION }} --label version={{ NEW_VERSION }} \
    -v {{ NEW_GIT_DIR }}:/UI --workdir /UI \
    -u 10001 \
    docker.io/library/node /usr/local/bin/node local-dev/appServer \
    || docker -H {{ DOCKER_HOST }} restart app-pod-app-{{ NEW_VERSION }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run new App API Container and join it to the POD network
  shell: |
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" \
    --name app-pod-api-{{ NEW_VERSION }} --label version={{ NEW_VERSION }} \
    -v {{ NEW_GIT_DIR }}:/UI --workdir /UI \
    -u 10001 \
    docker.io/library/node /usr/local/bin/node local-dev/apiServer \
    || docker -H {{ DOCKER_HOST }} restart app-pod-api-{{ NEW_VERSION }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run nginx to route traffic and join it to the POD network
  shell: |
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" \
    --name app-pod-nginx-{{ NEW_VERSION }} --label version={{ NEW_VERSION }} \
    -v "{{ DOCKERDATA_DIR }}/app-nginx/nginx.app.conf":/etc/nginx/conf.d/default.conf:ro \
    docker.io/library/nginx \
    || docker -H {{ DOCKER_HOST }} restart app-pod-nginx-{{ NEW_VERSION }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Run containerbuddy to register the POD with etcd
  shell: |
    docker -H {{ DOCKER_HOST }} run -d --restart unless-stopped --net "container:{{ NETWORK_CONTAINER }}" \
    --name app-pod-buddy-{{ NEW_VERSION }} --label version={{ NEW_VERSION }} \
    -v "{{ DOCKERDATA_DIR }}/app-containerbuddy":/etc/containerbuddy:ro \
    -e HOST_IP={{ HOST_IP }} \
    containerbuddy:local \
    || docker -H {{ DOCKER_HOST }} restart app-pod-buddy-{{ NEW_VERSION }}
  register: COMMAND_RESULT
  ignore_errors: true 
  failed_when: "COMMAND_RESULT.stderr and 'is already in use by container' not in COMMAND_RESULT.stderr"
  changed_when: COMMAND_RESULT.stdout != ""

- name: Get POD container ID
  shell: |
    docker -H {{ DOCKER_HOST }} ps --filter label=version --filter name=app-pod-pause-{{ NEW_VERSION }} -q
  register: APP_POD_ID_RESULT
  changed_when: false

- name: Wait for the POD to register with etcd
  uri: url=http://{{ HOST_IP }}:2379/v2/keys/containerbuddy/app-blue/app-blue-{{ APP_POD_ID_RESULT.stdout }}/service
  register: COMMAND_RESULT
  until: COMMAND_RESULT.status == 200
  retries: 15
  delay: 5
  when: APP_POD_ID_RESULT is defined and APP_POD_ID_RESULT.stdout != ""





